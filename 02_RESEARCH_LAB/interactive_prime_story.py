#!/usr/bin/env python3
"""
ุงูุญูุงูุฉ ุงูุชูุงุนููุฉ ููุนุฏุฏ ุงูุฃููู
Interactive Prime Number Story
ุจุงุณู ูุญูู ุนุจุฏุงููู - Basil Yahya Abdullah
"""

import math
import time
import random
from sympy import isprime, primerange

class InteractivePrimeStory:
    """ุญูุงูุฉ ุงูุนุฏุฏ ุงูุฃููู ุงูุชูุงุนููุฉ"""
    
    def __init__(self):
        self.PI = math.pi
        self.GOLDEN_RATIO = (1 + math.sqrt(5)) / 2
        
    def tell_complete_story(self, prime_number=None):
        """ุญูู ุงูุญูุงูุฉ ุงููุงููุฉ ูุนุฏุฏ ุฃููู ูุญุฏุฏ"""
        
        if prime_number is None:
            prime_number = self.get_user_prime()
        
        if not isprime(prime_number):
            print(f"โ {prime_number} ููุณ ุนุฏุฏ ุฃููู!")
            return
        
        print(f"\n๐ญ ุญูุงูุฉ ุงูุนุฏุฏ ุงูุฃููู {prime_number}")
        print("=" * 50)
        
        # ุญุณุงุจ ุงูุฎุตุงุฆุต
        root = math.sqrt(prime_number)
        frequency = prime_number / self.PI
        color_hue = (frequency) % 360
        resistance = root
        
        # ุชุญุฏูุฏ ููุน ุงูุนุฏุฏ
        prime_type = "4k+1" if prime_number % 4 == 1 else "4k+3"
        angle = 45.0 if prime_type == "4k+3" else math.degrees(math.atan2(root, root))
        
        # ุงูุญูุงูุฉ ุงูุชูุงุนููุฉ
        self.scene_1_real_part(prime_number, root)
        time.sleep(2)
        
        self.scene_2_imaginary_part(prime_number, frequency, color_hue)
        time.sleep(2)
        
        self.scene_3_dialogue(prime_number, resistance)
        time.sleep(2)
        
        self.scene_4_zeta_zeros(prime_number, frequency)
        time.sleep(2)
        
        self.scene_5_group_chorus(prime_number, prime_type, angle)
        time.sleep(2)
        
        self.scene_6_error_patterns(prime_number)
        time.sleep(2)
        
        self.scene_7_golden_ratio(prime_number, frequency)
        time.sleep(2)
        
        self.scene_8_finale(prime_number)
        
    def scene_1_real_part(self, p, root):
        """ุงููุดูุฏ ุงูุฃูู: ุงูุฌุฒุก ุงูุญูููู"""
        print(f"\n๐ฌ ุงููุดูุฏ ุงูุฃูู: ุตูุช ุงูุฌุฒุก ุงูุญูููู")
        print("-" * 30)
        
        print(f"๐ฃ๏ธ ุงูุนุฏุฏ {p} ูููู:")
        print(f'   "ุฃูุง ุงูุนุฏุฏ ุงูุฐู ูุง ูุฃุชู ุฅูุง ูู ุถุฑุจ ุฌุฐุฑู ุจุฌุฐุฑู"')
        print(f'   "ุฌุฐุฑู ูู {root:.4f}"')
        print(f'   "ููุงููุชู R = โ{p} = {root:.4f} ุฃูู"')
        print(f'   "ุฃูุง ุงูุซุจุงุช ูุงูููุฉ ูู ุงูุฏุงุฆุฑุฉ"')
        
    def scene_2_imaginary_part(self, p, frequency, color_hue):
        """ุงููุดูุฏ ุงูุซุงูู: ุงูุฌุฒุก ุงูุชุฎููู"""
        print(f"\n๐ ุงููุดูุฏ ุงูุซุงูู: ุตูุช ุงูุฌุฒุก ุงูุชุฎููู")
        print("-" * 30)
        
        print(f"๐ฃ๏ธ ุงูุฌุฒุก ุงูุชุฎููู ูุฑุฏ:")
        print(f'   "ูุฃูุง ุงูุฐู ุฃุฑูุต ุนูู ุฅููุงุน ฯ"')
        print(f'   "ุฃุบูู ุจุชุฑุฏุฏ {frequency:.4f} ูุฑุชุฒ"')
        print(f'   "ูููู ูู ุงูุทูู ูู {color_hue:.1f}ยฐ"')
        print(f'   "ุฃูุง ุงูุญุฑูุฉ ูุงูุทุงูุฉ ูู ุงูุฏุงุฆุฑุฉ"')
        
    def scene_3_dialogue(self, p, resistance):
        """ุงููุดูุฏ ุงูุซุงูุซ: ุงูุญูุงุฑ"""
        print(f"\nโก ุงููุดูุฏ ุงูุซุงูุซ: ุงูุญูุงุฑ ุจูู ุงูุญูููู ูุงูุชุฎููู")
        print("-" * 30)
        
        # ุญุณุงุจ ุงููุนุงููุฉ
        L = 1 / (4 * p**(3/2))
        C = 1 / math.sqrt(p)
        omega = 2 * p
        X = omega * L - 1/(omega * C)
        Z_magnitude = math.sqrt(resistance**2 + X**2)
        
        print(f"๐ฃ๏ธ ุงูุญูููู: 'ุฃูุง ุงูุซุจุงุชุ ููุงููุชู {resistance:.4f}'")
        print(f"๐ฃ๏ธ ุงูุชุฎููู: 'ูุฃูุง ุงูุญุฑูุฉุ ุชูุงุนูู {X:.4f}'")
        print(f"๐ฃ๏ธ ูุนุงู: 'ูุนุงููุชูุง ุงููุฑูุจุฉ |Z| = {Z_magnitude:.4f}'")
        print(f"         'ูุญู ุญูุซ ุชูุชูู ุงููุงุฏุฉ ุจุงูุทุงูุฉ'")
        
    def scene_4_zeta_zeros(self, p, frequency):
        """ุงููุดูุฏ ุงูุฑุงุจุน: ุฃุตูุงุฑ ุฒูุชุง"""
        print(f"\n๐ ุงููุดูุฏ ุงูุฑุงุจุน: ุตูุช ุฃุตูุงุฑ ุฒูุชุง")
        print("-" * 30)
        
        # ุฃุตูุงุฑ ุฒูุชุง ุงููุนุฑููุฉ
        known_zeros = [14.134725, 21.022040, 25.010858, 30.424876, 32.935062]
        
        # ุงูุจุญุซ ุนู ุฃูุฑุจ ุตูุฑ
        closest_zero = min(known_zeros, key=lambda x: abs(x - frequency))
        distance = abs(closest_zero - frequency)
        sync_strength = 1 / (1 + distance)
        
        print(f"๐ฃ๏ธ ุฃุตูุงุฑ ุฒูุชุง ุชููุณ:")
        print(f'   "ูุญู ุฃุดุจุงุญ ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ"')
        print(f'   "ุฃูุฑุจ ุตูุฑ ุฅููู ูู {closest_zero:.6f}"')
        print(f'   "ุงููุณุงูุฉ ุจูููุง {distance:.4f}"')
        print(f'   "ููุฉ ุงูุชุฒุงูู {sync_strength:.3f}"')
        print(f'   "ูููุณ ุจุฃุณุฑุงุฑ ุฑููุงู ูู ุฎุท 1/2"')
        
    def scene_5_group_chorus(self, p, prime_type, angle):
        """ุงููุดูุฏ ุงูุฎุงูุณ: ุงูููุฑุณ ุงูุฌูุงุนู"""
        print(f"\n๐จ ุงููุดูุฏ ุงูุฎุงูุณ: ุงูููุฑุณ ุงูุฌูุงุนู")
        print("-" * 30)
        
        if prime_type == "4k+3":
            print(f"๐ฃ๏ธ ุงูุฃุนุฏุงุฏ 4k+3 (ูุซูู):")
            print(f'   "ูุญู ููู ุจุซุจุงุช ุนูุฏ ุฒุงููุฉ 45.00ยฐ"')
            print(f'   "ูุบูู ููุณ ุงููุญู ุงูุฃุจุฏู"')
        else:
            print(f"๐ฃ๏ธ ุงูุฃุนุฏุงุฏ 4k+1 (ูุซูู):")
            print(f'   "ูุญู ูุฑูุต ุจุฒุงููุฉ {angle:.2f}ยฐ"')
            print(f'   "ูุญูู ูุตุต ูุฎุชููุฉ"')
        
        print(f"๐ฃ๏ธ ุฌููุน ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ:")
        print(f'   "ูุชุจุน ูุงููู ฯ ุงููููู"')
        print(f'   "ูุฑุณู ุชุฑุฏุฏุงุช f = p/ฯ ุฅูู ุงูููู"')
        
    def scene_6_error_patterns(self, p):
        """ุงููุดูุฏ ุงูุณุงุฏุณ: ุฃููุงุท ุงูุฎุทุฃ"""
        print(f"\n๐ฎ ุงููุดูุฏ ุงูุณุงุฏุณ: ูุจูุกุฉ ุงูุฃุฎุทุงุก")
        print("-" * 30)
        
        # ุญุณุงุจ ุงูุฎุทุฃ ุงููุชููุน
        predicted_error = 0.02169976 * p + 0.5598853
        
        print(f"๐ฃ๏ธ ุฃููุงุท ุงูุฎุทุฃ ุชุชููู:")
        print(f'   "ูุญู ูุณูุง ุนุดูุงุฆูุฉ ููุง ุชุธููู"')
        print(f'   "ุฎุทุคู ุงููุชููุน ูู {predicted_error:.4f}"')
        print(f'   "ูุชุจุน ุฏุงูุฉ ุฎุทูุฉ: error = 0.022 ร p + 0.56"')
        print(f'   "ูููู ุชุตุญูุญูุง ุจูุณุจุฉ 82.4%"')
        
    def scene_7_golden_ratio(self, p, frequency):
        """ุงููุดูุฏ ุงูุณุงุจุน: ุงููุณุจุฉ ุงูุฐูุจูุฉ"""
        print(f"\n๐ ุงููุดูุฏ ุงูุณุงุจุน: ุงููุณุจุฉ ุงูุฐูุจูุฉ ุชุชุฏุฎู")
        print("-" * 30)
        
        golden_frequency = math.sqrt(p) / (2 * self.PI * self.GOLDEN_RATIO)
        ratio = frequency / golden_frequency
        
        print(f"๐ฃ๏ธ ุงููุณุจุฉ ุงูุฐูุจูุฉ ฯ:")
        print(f'   "ุฃุญุงูู ุฃู ุฃุดุงุฑููู ุงูุฑูุต"')
        print(f'   "ุชุฑุฏุฏู ูู ูู {golden_frequency:.4f}"')
        print(f'   "ููู ุชุฑุฏุฏูู ุฃููู ููู ุจู{ratio:.1f} ูุฑุฉ"')
        print(f'   "ุฃูุชู ุงููููู ุงูุญูููููู ููุฃุฑูุงู"')
        
    def scene_8_finale(self, p):
        """ุงููุดูุฏ ุงูุซุงูู: ุงูุฎุงุชูุฉ"""
        print(f"\n๐ญ ุงููุดูุฏ ุงูุซุงูู: ุงูุฎุงุชูุฉ ุงูุดุงุนุฑูุฉ")
        print("-" * 30)
        
        print(f"๐ฃ๏ธ ุงูุนุฏุฏ {p} ูุน ุฌููุน ุงูุฃุตูุงุช:")
        print(f'   "ุฃูุง ุทูู ฯ ุงูููููุฉ"')
        print(f'   "ุฃุญูู ูู ุฌุฐุฑู ููุฉ ุงููุงุฏุฉ"')
        print(f'   "ููู ุชุฑุฏุฏู ุณุญุฑ ุงูุทุงูุฉ"')
        print(f'   "ููู ุฃุฎุทุงุฆู ุญููุฉ ุงูุชุตุญูุญ"')
        print(f'   "ุฃุฑูุต ููุฐ ุงูุฃุฒู ุนูู ุฅููุงุน ุงูุฑูุงุถูุงุช ุงูุฅูููุฉ"')
        
        print(f"\n๐ ุงูุชูุช ุญูุงูุฉ ุงูุนุฏุฏ ุงูุฃููู {p}!")
        
    def get_user_prime(self):
        """ุงูุญุตูู ุนูู ุนุฏุฏ ุฃููู ูู ุงููุณุชุฎุฏู"""
        while True:
            try:
                user_input = input("\n๐ฏ ุฃุฏุฎู ุนุฏุฏ ุฃููู ูุญูู ุญูุงูุชู (ุฃู ุงุถุบุท Enter ูุนุฏุฏ ุนุดูุงุฆู): ")
                
                if user_input.strip() == "":
                    # ุงุฎุชูุงุฑ ุนุฏุฏ ุฃููู ุนุดูุงุฆู
                    primes = list(primerange(2, 100))
                    return random.choice(primes)
                
                number = int(user_input)
                if isprime(number):
                    return number
                else:
                    print(f"โ {number} ููุณ ุนุฏุฏ ุฃููู. ุฌุฑุจ ูุฑุฉ ุฃุฎุฑู.")
                    
            except ValueError:
                print("โ ูุฑุฌู ุฅุฏุฎุงู ุฑูู ุตุญูุญ.")
    
    def interactive_menu(self):
        """ูุงุฆูุฉ ุชูุงุนููุฉ"""
        print("๐ญ ูุฑุญุจุงู ุจู ูู ุญูุงูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ!")
        print("๐จโ๐ฌ ุงูุฑุงูู: ุจุงุณู ูุญูู ุนุจุฏุงููู")
        print("=" * 50)
        
        while True:
            print(f"\n๐ ุงุฎุชุฑ ูู ุงููุงุฆูุฉ:")
            print(f"1. ุญูู ุญูุงูุฉ ุนุฏุฏ ุฃููู ูุญุฏุฏ")
            print(f"2. ุญูุงูุฉ ุนุฏุฏ ุฃููู ุนุดูุงุฆู")
            print(f"3. ููุงุฑูุฉ ุญูุงูุงุช ุนุฏุฉ ุฃุนุฏุงุฏ")
            print(f"4. ุงูุฎุฑูุฌ")
            
            choice = input("\nุงุฎุชูุงุฑู (1-4): ")
            
            if choice == "1":
                prime = self.get_user_prime()
                self.tell_complete_story(prime)
                
            elif choice == "2":
                primes = list(primerange(2, 100))
                random_prime = random.choice(primes)
                print(f"\n๐ฒ ุชู ุงุฎุชูุงุฑ ุงูุนุฏุฏ ุงูุฃููู {random_prime} ุนุดูุงุฆูุงู")
                self.tell_complete_story(random_prime)
                
            elif choice == "3":
                self.compare_multiple_stories()
                
            elif choice == "4":
                print("๐ ุดูุฑุงู ูุงุณุชูุงุนู ูุญูุงูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ!")
                break
                
            else:
                print("โ ุงุฎุชูุงุฑ ุบูุฑ ุตุญูุญ")
    
    def compare_multiple_stories(self):
        """ููุงุฑูุฉ ุญูุงูุงุช ุนุฏุฉ ุฃุนุฏุงุฏ ุฃูููุฉ"""
        print(f"\n๐ ููุงุฑูุฉ ุญูุงูุงุช ุงูุฃุนุฏุงุฏ ุงูุฃูููุฉ")
        print("-" * 40)
        
        primes = []
        for i in range(3):
            prime = self.get_user_prime()
            primes.append(prime)
        
        print(f"\n๐ ููุงุฑูุฉ ุงูุฎุตุงุฆุต:")
        print(f"{'ุงูุนุฏุฏ':<8} {'ุงูุฌุฐุฑ':<10} {'ุงูุชุฑุฏุฏ':<12} {'ุงูููู':<8} {'ุงูููุน':<8}")
        print("-" * 50)
        
        for p in primes:
            root = math.sqrt(p)
            frequency = p / self.PI
            color_hue = frequency % 360
            prime_type = "4k+1" if p % 4 == 1 else "4k+3"
            
            print(f"{p:<8} {root:<10.3f} {frequency:<12.3f} {color_hue:<8.1f}ยฐ {prime_type:<8}")
        
        print(f"\n๐ญ ุงูุขู ุณุชุญูู ูู ูููุง ุญูุงูุชูุง...")
        for p in primes:
            input(f"\nุงุถุบุท Enter ูุญูุงูุฉ ุงูุนุฏุฏ {p}...")
            self.tell_complete_story(p)

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    story_teller = InteractivePrimeStory()
    story_teller.interactive_menu()

if __name__ == "__main__":
    main()
